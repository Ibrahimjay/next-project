generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  avatar       String?
  role         String   @default("user")
  password     String
  address      String
  neighborhood String
  bio          String?
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  posts    Post[]
  comments Comment[]
  likes    Like[]
  news     News[]
  Report   Report[]
}

model Post {
  id           String   @id @default(cuid())
  content      String
  imageUrl     String?
  imageStoreID String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Business {
  id            Int      @id @default(autoincrement()) // âœ… this is required
  title         String
  price         String
  image         String
  location      String?
  timePosted    String?
  distance      Float?
  isFavorited   Boolean
  isFree        Boolean
  isAd          Boolean?
  originalPrice String?
}

model News {
  id          Int      @id @default(autoincrement())
  headline    String
  image       String
  content     String
  timePosted  String
  source      String?
  likes       Int
  comments    Int
  isLiked     Boolean  @default(false)
  isSponsored Boolean? @default(false)
  isPinned    Boolean? @default(false)
  ctaText     String?

  publisher   User   @relation(fields: [publisherId], references: [id])
  publisherId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Priority {
  low
  medium
  high
}

enum Status {
  reported
  in_progress
  resolved
}

model Report {
  id          String   @id @default(cuid())
  title       String
  category    String
  description String
  location    String
  priority    Priority @default(medium)
  status      Status   @default(reported)
  photos      String[] // Assuming you store image URLs or IDs
  name        String // From contactInfo
  email       String
  phone       String? // Optional
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  publisher   User   @relation(fields: [publisherId], references: [id])
  publisherId String
}
