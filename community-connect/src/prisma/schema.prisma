generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  avatar       String?
  password     String
  address      String
  neighborhood String
  bio          String?
  verified     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  role         UserRole  @default(user)
  comments     Comment[]
  likes        Like[]
  news         News[]
  posts        Post[]
  Report       Report[]
}

model Post {
  id           String    @id @default(cuid())
  content      String
  imageUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  authorId     String
  imageStoreID String?
  comments     Comment[]
  likes        Like[]
  author       User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model News {
  id          Int      @id @default(autoincrement())
  headline    String
  image       String
  content     String
  timePosted  String
  source      String?
  likes       Int
  comments    Int
  isLiked     Boolean  @default(false)
  publisherId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ctaText     String?
  isPinned    Boolean? @default(false)
  isSponsored Boolean? @default(false)
  publisher   User     @relation(fields: [publisherId], references: [id])
}

model Report {
  id          String   @id @default(cuid())
  title       String
  category    String
  description String
  location    String
  priority    Priority @default(medium)
  status      Status   @default(reported)
  photos      String[]
  name        String
  email       String
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publisherId String
  publisher   User     @relation(fields: [publisherId], references: [id])
}

model Business {
  id            Int      @id @default(autoincrement())
  title         String
  price         String
  image         String?
  location      String?
  timePosted    String?
  distance      Float?
  isFavorited   Boolean
  isFree        Boolean
  isAd          Boolean?
  originalPrice String?
  createdAt     DateTime @default(now())
}

enum Priority {
  low
  medium
  high
}

enum Status {
  reported
  in_progress
  resolved
}
